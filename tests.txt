1. Использование curl для нагрузки на сервер
for i in {1..1000}; do curl -s http://yourserver.com > /dev/null & done
Здесь:
    Цикл выполняет 1000 параллельных запросов.
    curl -s http://yourserver.com — делает запрос на указанный сервер.
    > /dev/null — игнорирует вывод (только тестируется нагрузка на сервер).
    & — позволяет выполнять запросы в фоновом режиме, что делает их параллельными.

2. Использование nc (netcat) для нагрузочного тестирования
echo -e "GET / HTTP/1.1\r\nHost: yourserver.com\r\nConnection: close\r\n\r\n" | nc yourserver.com 80
    Это отправляет HTTP-запрос на сервер на порт 80.
    GET / HTTP/1.1 — это стандартный HTTP-запрос для получения главной страницы.
    Host: yourserver.com — заголовок Host, который указывает на хост.
    Connection: close — закрывает соединение после получения ответа.

3. Использование telnet для тестирования
telnet yourserver.com 80
Затем в интерактивной сессии отправляем HTTP-запрос:
GET / HTTP/1.1
Host: yourserver.com
Connection: close

Если вы хотите автоматизировать эти запросы, используйте цикл:
for i in {1..1000}; do echo -e "GET / HTTP/1.1\r\nHost: yourserver.com\r\nConnection: close\r\n\r\n" | telnet yourserver.com 80 & done

4. Siege  
Базовый нагрузочный тест (без задержек, "benchmark" режим)
siege -b -c 20 -t 1M http://127.0.0.1:8001
siege -c 10 -r 100 -d 1 -b http://127.0.0.1:8000/
-b — benchmark mode (без задержек между запросами, максимальная нагрузка).
-c 20 — 20 одновременных подключений.
-t 1M — тест длится 1 минуту
Что проверяем:
Availability > 99.5% (успешные ответы 2xx/3xx).
Нет зависших соединений (в логах Siege не должно быть 503, Timeout и т. д.).
Память сервера (через htop, top или ps aux | grep <сервер>).

Проверка на зависшие соединения
siege -c 10 -t 5M -i http://127.0.0.1:8001 
Параметры:
-i (internet mode) — случайные задержки между запросами.

5. nginx
sudo systemctl start nginx or sudo service nginx start 
url -X POST -v http://127.0.0.1

./ubuntu_tester http://127.0.0.1:8001/bbb 

valgrind --leak-check=full ./webserv


COMMANDS:

curl -X DELETE http://localhost:8001/bbb/1.txt

for i in {1..1000}; do curl -s  http://127.0.0.1:8082 > /dev/null & done

echo -e "GET / HTTP/1.1\r\nHost: 127.0.0.1\r\nConnection: close\r\n\r\n" | nc 127.0.0.1 8001

for i in {1..1000}; do echo -e "GET / HTTP/1.1\r\nHost: 127.0.0.1:8082\r\nConnection: close\r\n\r\n" | nc 127.0.0.1 8082 & done

telnet 127.0.0.1 8001

for i in {1..1000}; do echo -e "GET / HTTP/1.1\r\nHost: 127.0.0.1\r\nConnection: close\r\n\r\n" | telnet 127.0.0.1 8001 & done

CGI
curl -X POST -H "Content-Type: application/x-www-form-urlencoded" --data "greeting=sdjflkdsjkflkdlsjaf" http://127.0.0.1:8006/cgi-bin/greet.py
curl -X POST -H "Content-Type: application/x-www-form-urlencoded" --data "name=dsf" http://127.0.0.1:8006/cgi-bin/hello.py

upload file test_upload.txt
curl -X POST -F "file=@/home/sshevche/Desktop/webserver-draft/test_upload.txt" http://127.0.0.1:8001/bbb/index.html